server.port=${PORT:${SERVER_PORT:0}}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

spring.application.name=order-service
eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka/
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Habilita los circuit breakers para la gestion de salud
management.health.circuitbreakers.enabled=true
# Expone todos los endpoints de administracion via web
management.endpoints.web.exposure.include=*
# Muestra siempre detalles completos en el endpoint de salud
management.endpoint.health.show-details=always
# Habilita el uso de circuit breakers para Feign clients
#feign.circuitbreaker.enabled=true

# Registra un health indicator para el circuito 'inventario'
resilience4j.circuitbreaker.instances.inventario.register-health-indicator=true
# Tamano del buffer para eventos del circuito 'inventario'
resilience4j.circuitbreaker.instances.inventario.event-consumer-buffer-size=10
# Tipo de ventana deslizante usada para calcular metricas (basada en conteo)
resilience4j.circuitbreaker.instances.inventario.sliding-window-type=COUNT_BASED
# Tamano de la ventana deslizante (numero de llamadas consideradas)
resilience4j.circuitbreaker.instances.inventario.sliding-window-size=5
# Umbral de porcentaje de fallos para abrir el circuito (50%)
resilience4j.circuitbreaker.instances.inventario.failure-rate-threshold=50
# Tiempo que el circuito permanece abierto antes de pasar a estado half-open (5 segundos)
resilience4j.circuitbreaker.instances.inventario.wait-duration-in-open-state=5s
# Numero de llamadas permitidas en estado half-open para testear recuperacion
resilience4j.circuitbreaker.instances.inventario.permitted-number-of-calls-in-half-open-state=3
# Permite la transicion automatica del estado abierto a half-open al finalizar el tiempo de espera
resilience4j.circuitbreaker.instances.inventario.automatic-transition-from-open-to-half-open-enabled=true

# Tiempo maximo de espera antes de que un time limiter expire (3 segundos)
resilience4j.timelimiter.instances.inventario.timeout-duration=3s

# Numero maximo de intentos de reintento para la instancia 'inventario'
resilience4j.retry.instances.inventario.max-attempts=3
# Duracion maxima de espera exponencial entre intentos de reintento (5 segundos)
resilience4j.retry.instances.inventario.exponential-max-wait-duration=5s

management.tracing.enabled=true
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0
spring.zipkin.enabled=true
spring.zipkin.locator.discovery.enabled=true
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.msvc.order.event.OrderPlacedEvent